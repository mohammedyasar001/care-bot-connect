
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, Appointment, ChatMessage } from '@/types';
import { 
  getUser, 
  saveUser, 
  getAppointments, 
  saveAppointment, 
  getChatHistory, 
  clearChatHistory,
  sendMessageToBot 
} from '@/services/dbService';
import { useToast } from '@/components/ui/use-toast';

interface HealthCareContextType {
  user: User | null;
  setUser: (user: User) => void;
  chatMessages: ChatMessage[];
  addMessage: (message: string, sender: 'You' | 'HealthCare Bot') => void;
  clearChat: () => void;
  appointments: Appointment[];
  addAppointment: (appointment: Appointment) => Promise<Appointment>;
  profileMenuOpen: boolean;
  toggleProfileMenu: () => void;
  sendMessage: (message: string) => void;
  isLoading: boolean;
}

const HealthCareContext = createContext<HealthCareContextType | undefined>(undefined);

export function HealthCareProvider({ children }: { children: ReactNode }) {
  const [user, setUserState] = useState<User | null>(null);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [profileMenuOpen, setProfileMenuOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  // Load data from API on component mount
  useEffect(() => {
    const fetchData = async () => {
      try {
        setIsLoading(true);
        
        // Fetch user data
        const savedUser = await getUser();
        if (savedUser) {
          setUserState(savedUser);
        }

        // Fetch appointments
        const savedAppointments = await getAppointments();
        setAppointments(savedAppointments);

        // Fetch chat history
        const savedChat = await getChatHistory();
        if (savedChat && savedChat.length > 0) {
          setChatMessages(savedChat);
        }
      } catch (error) {
        console.error('Error fetching initial data:', error);
        toast({
          title: "Connection Error",
          description: "Could not connect to the Python backend server. Make sure it's running.",
          variant: "destructive"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [toast]);

  // Save user when it changes
  const setUser = async (userData: User) => {
    try {
      setIsLoading(true);
      await saveUser(userData);
      setUserState(userData);
      toast({
        title: "Profile Updated",
        description: `Welcome, ${userData.name}!`,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update profile",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Add a message to the chat
  const addMessage = async (message: string, sender: 'You' | 'HealthCare Bot') => {
    try {
      const newMessage: ChatMessage = {
        id: Date.now().toString(),
        sender,
        message,
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, newMessage]);
      
      // We're not calling the API here as we use sendMessageToBot for user messages
      // and bot responses are automatically generated by the backend
    } catch (error) {
      console.error('Error adding message:', error);
    }
  };

  // Clear the chat history
  const clearChat = async () => {
    try {
      setIsLoading(true);
      await clearChatHistory();
      const newChatHistory = await getChatHistory();
      setChatMessages(newChatHistory);
    } catch (error) {
      console.error('Error clearing chat:', error);
      toast({
        title: "Error",
        description: "Failed to clear chat history",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Add a new appointment
  const addAppointment = async (appointment: Appointment) => {
    try {
      setIsLoading(true);
      const newAppointment = await saveAppointment(appointment);
      setAppointments(prev => [...prev, newAppointment]);
      toast({
        title: "Appointment Scheduled",
        description: `${appointment.date} at ${appointment.time}`,
      });
      return newAppointment;
    } catch (error) {
      console.error('Error adding appointment:', error);
      toast({
        title: "Error",
        description: "Failed to schedule appointment",
        variant: "destructive"
      });
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  // Toggle profile menu
  const toggleProfileMenu = () => {
    setProfileMenuOpen(prev => !prev);
  };

  // Send message and get bot response
  const sendMessage = async (message: string) => {
    if (!message.trim()) return;
    
    try {
      setIsLoading(true);
      
      // Add user message to chat immediately for better UX
      const userMessage: ChatMessage = {
        id: Date.now().toString(),
        sender: 'You',
        message: message,
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, userMessage]);
      
      // Send to backend and get response
      const messages = await sendMessageToBot(message);
      
      // Only add the bot response if it exists (the user message is already added)
      if (messages.length > 1) {
        const botMessage = messages[1];
        setChatMessages(prev => [...prev, botMessage]);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      toast({
        title: "Error",
        description: "Failed to send message",
        variant: "destructive"
      });
      
      // Add a fallback bot response if the backend fails
      const fallbackMessage: ChatMessage = {
        id: Date.now().toString() + "-fallback",
        sender: "HealthCare Bot",
        message: "I'm sorry, I'm having trouble connecting to the server right now. Please try again later.",
        timestamp: new Date()
      };
      
      setChatMessages(prev => [...prev, fallbackMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <HealthCareContext.Provider value={{
      user,
      setUser,
      chatMessages,
      addMessage,
      clearChat,
      appointments,
      addAppointment,
      profileMenuOpen,
      toggleProfileMenu,
      sendMessage,
      isLoading
    }}>
      {children}
    </HealthCareContext.Provider>
  );
}

export function useHealthCare() {
  const context = useContext(HealthCareContext);
  if (context === undefined) {
    throw new Error('useHealthCare must be used within a HealthCareProvider');
  }
  return context;
}
